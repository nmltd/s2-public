{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = [2.044750, 0.852716, 2.544913, 2.485633] , fx = 1.4582903851739224\n"
     ]
    }
   ],
   "source": [
    "/**\n",
    " * Solve an SQP problem with only inequality constraints using an active-set solver.\n",
    " *\n",
    " * example 15.2 in Andreas Antoniou, Wu-Sheng Lu\n",
    " *\n",
    " * @author Haksun Li\n",
    " */\n",
    "\n",
    "%use s2, algoquant\n",
    "import dev.nm.solver.multivariate.constrained.general.sqp.activeset.SQPActiveSetMinimizer.Solution\n",
    "import dev.nm.solver.IterativeSolution\n",
    "\n",
    "// the objective function: min f(x)\n",
    "val f: RealScalarFunction = object : RealScalarFunction {\n",
    "    override fun evaluate(x: Vector): Double {\n",
    "        val x1: Double = x.get(1)\n",
    "        val x2: Double = x.get(2)\n",
    "        val x3: Double = x.get(3)\n",
    "        val x4: Double = x.get(4)\n",
    "        var fx = (x1 - x3) * (x1 - x3)\n",
    "        fx += (x2 - x4) * (x2 - x4)\n",
    "        fx /= 2.0\n",
    "        return fx\n",
    "    }\n",
    "\n",
    "    override fun dimensionOfDomain(): Int {\n",
    "        return 4\n",
    "    }\n",
    "\n",
    "    override fun dimensionOfRange(): Int {\n",
    "        return 1\n",
    "    }\n",
    "}\n",
    "\n",
    "// the set of greater-than constraints, G1(x) >= 0, G2(x) >= 0\n",
    "val greater: GreaterThanConstraints = GeneralGreaterThanConstraints(\n",
    "    object : RealScalarFunction {\n",
    "        override fun evaluate(x: Vector): Double {\n",
    "            val x1: Double = x.get(1)\n",
    "            val x2: Double = x.get(2)\n",
    "            val v: Matrix = DenseMatrix(doubleArrayOf(x1, x2), 2, 1)\n",
    "            val A: Matrix = DenseMatrix(arrayOf(doubleArrayOf(0.25, 0.0), doubleArrayOf(0.0, 1.0)))\n",
    "            val B: Matrix = DenseMatrix(doubleArrayOf(0.5, 0.0), 2, 1)\n",
    "            var FX: Matrix = v.t().multiply(A).multiply(v)\n",
    "            FX = FX.scaled(-1.0)\n",
    "            FX = FX.add(v.t().multiply(B))\n",
    "            var fx: Double = FX.get(1, 1)\n",
    "            fx += 0.75\n",
    "            return fx\n",
    "        }\n",
    "\n",
    "        override fun dimensionOfDomain(): Int {\n",
    "            return 4\n",
    "        }\n",
    "\n",
    "        override fun dimensionOfRange(): Int {\n",
    "            return 1\n",
    "        }\n",
    "    }, // G1\n",
    "    object : RealScalarFunction {\n",
    "        override fun evaluate(x: Vector): Double {\n",
    "            val x3: Double = x.get(3)\n",
    "            val x4: Double = x.get(4)\n",
    "            val v: Matrix = DenseMatrix(doubleArrayOf(x3, x4), 2, 1)\n",
    "            val A: Matrix = DenseMatrix(arrayOf(doubleArrayOf(5.0, 3.0), doubleArrayOf(3.0, 5.0)))\n",
    "            val B: Matrix = DenseMatrix(doubleArrayOf(11.0 / 2, 13.0 / 2), 2, 1)\n",
    "            var FX: Matrix = v.t().multiply(A).multiply(v)\n",
    "            FX = FX.scaled(-1.0 / 8)\n",
    "            FX = FX.add(v.t().multiply(B))\n",
    "            var fx: Double = FX.get(1, 1)\n",
    "            fx += -35.0 / 2\n",
    "            return fx\n",
    "        }\n",
    "\n",
    "        override fun dimensionOfDomain(): Int {\n",
    "            return 4\n",
    "        }\n",
    "\n",
    "        override fun dimensionOfRange(): Int {\n",
    "            return 1\n",
    "        }\n",
    "    } // G2\n",
    ")\n",
    "\n",
    "// construct an SQP solver\n",
    "val solver = SQPActiveSetOnlyInequalityConstraintMinimizer(1e-7, 300)\n",
    "\n",
    "// solve the SQP problem\n",
    "val minimizer: IterativeSolution<Vector> = solver.solve(f, greater)\n",
    "\n",
    "// the solution\n",
    "val x: Vector = minimizer.search(DenseVector(1.0, 0.5, 2.0, 3.0), DenseVector(1.0, 1.0))\n",
    "val fx: Double = f.evaluate(x)\n",
    "println(\"x = $x, fx = $fx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Kotlin",
   "language": "kotlin",
   "name": "kotlin"
  },
  "language_info": {
   "codemirror_mode": "text/x-kotlin",
   "file_extension": ".kt",
   "mimetype": "text/x-kotlin",
   "name": "kotlin",
   "nbconvert_exporter": "",
   "pygments_lexer": "kotlin",
   "version": "1.5.30-dev-598"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
